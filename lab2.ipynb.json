{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bc080c62",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2cf38d84",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "43373ddf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6f2bd651",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Размерность матрицы:  5 x 5\n",
      "Прогоночные коэффициенты v: \n",
      "v[0] =  -0.0000\n",
      "v[1] =  -0.0000\n",
      "v[2] =  -0.0000\n",
      "v[3] =  -0.0000\n",
      "v[4] =   0.0000\n",
      "Прогоночные коэффициенты u: \n",
      "u[0] = -10.0000\n",
      "u[1] = -12.5000\n",
      "u[2] =   3.8000\n",
      "u[3] =   8.0000\n",
      "u[4] =   7.5000\n",
      "Решение: \n",
      "x[0] = -10.0000\n",
      "x[1] = -12.5000\n",
      "x[2] =   3.8000\n",
      "x[3] =   8.0000\n",
      "x[4] =   7.5000\n"
     ]
    }
   ],
   "source": [
    "a = [[ 1, 0, 0, 0, 0 ], [ 0.5, 1, 0, 0, 0], [-0, -0.4, 1, 0, 0], [-0, -0, 0, 1, 0], [-0, -0, 0, 0.25, 1]] \n",
    "\n",
    "b = [-10, -17.5, 8.8, 8, 9.5]\n",
    " \n",
    "\n",
    "\n",
    "def print_arr( string, namevec, a ):\n",
    "    if (type(a) == int) or (type(a) == float):\n",
    "        print(a)\n",
    "    else:\n",
    "        print( string )\n",
    "        for k in range(len(a)):   \n",
    "            print(\"{}[{}] = {:8.4f}\".format(namevec, k, a[k]))\n",
    "            \n",
    " \n",
    "\n",
    "def isCorrectArray(a):\n",
    "    n = len(a)\n",
    "    \n",
    "    for row in range(0, n):\n",
    "        if( len(a[row]) != n ):\n",
    "            print('Не соответствует размерность')\n",
    "            return False\n",
    "        \n",
    "    for row in range(1, n - 1):\n",
    "        if(abs(a[row][row]) < abs(a[row][row - 1]) + abs(a[row][row + 1])):\n",
    "            print('Не выполнены условия достаточности')\n",
    "            return False\n",
    " \n",
    "    if (abs(a[0][0]) < abs(a[0][1]))or(abs(a[n - 1][n - 1]) < abs(a[n - 1][n - 2])):\n",
    "        print('Не выполнены условия достаточности')\n",
    "        return False\n",
    "        \n",
    "    \n",
    "    for row in range(0, len(a)):\n",
    "        if( a[row][row] == 0 ):\n",
    "            print('Нулевые элементы на главной диагонали')\n",
    "            return False\n",
    "    return True\n",
    " \n",
    " \n",
    "\n",
    "def solution(a, b):\n",
    "    if( not isCorrectArray(a) ):\n",
    "        print('Ошибка в исходных данных')\n",
    "        return -1 \n",
    " \n",
    "    n = len(a)\n",
    "    x = [0 for k in range(0, n)] \n",
    "    print('Размерность матрицы: ',n,'x',n)\n",
    "    \n",
    "   \n",
    "    v = [0 for k in range(0, n)]\n",
    "    u = [0 for k in range(0, n)]\n",
    "\n",
    "    v[0] = a[0][1] / (-a[0][0]) \n",
    "    u[0] = ( - b[0]) / (-a[0][0]) \n",
    "    for i in range(1, n - 1): \n",
    "        v[i] = a[i][i+1] / ( -a[i][i] - a[i][i-1]*v[i-1] )\n",
    "        u[i] = ( a[i][i-1]*u[i-1] - b[i] ) / ( -a[i][i] - a[i][i-1]*v[i-1] )\n",
    "\n",
    "    v[n-1] = 0\n",
    "    u[n-1] = (a[n-1][n-2]*u[n-2] - b[n-1]) / (-a[n-1][n-1] - a[n-1][n-2]*v[n-2])\n",
    "    \n",
    "    print_arr('Прогоночные коэффициенты v: ','v', v)\n",
    "    print_arr('Прогоночные коэффициенты u: ','u', u)\n",
    "    \n",
    "  \n",
    "    x[n-1] = u[n-1]\n",
    "    for i in range(n-1, 0, -1):\n",
    "        x[i-1] = v[i-1] * x[i] + u[i-1]\n",
    "        \n",
    "    return x    \n",
    "                \n",
    "    \n",
    "\n",
    "x = solution(a, b)  \n",
    "print_arr('Решение: ','x', x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "317b9197",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
