{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "becab729",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-57-2dd97588ecd1>, line 73)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-57-2dd97588ecd1>\"\u001b[0;36m, line \u001b[0;32m73\u001b[0m\n\u001b[0;31m    (x)=np.zeros(n,dtype=float)\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "import numpy as np  \n",
    "from numpy import * \n",
    "\n",
    "def Reform (a, b): \n",
    "    p=np.column_stack((a,b))\n",
    "    row=p.shape[0]\n",
    "    for m in range(0,row):\n",
    "        if m<row:\n",
    "                         big = np.argmax (abs (p [m:, m])) \n",
    "        else:\n",
    "            big=0\n",
    "            b1 = big + m \n",
    "            c = np.copy (p [b1 ,:]) \n",
    "        p[b1,:]=p[m,:]\n",
    "        p[m,:]=c\n",
    "    return p\n",
    "    \n",
    "def GaussS(a,b, x):\n",
    "         p = Reform (a, b) \n",
    "         row = p.shape [0] \n",
    "         a0 = p [:, 0: row] \n",
    "         b0 = p [:, row] \n",
    "         j=0\n",
    "         err = 100. \n",
    "print(\"Gauss-S method\")\n",
    "while (err> 1.e-6 and j <2500):\n",
    "    i=0\n",
    "while (i <x.size): \n",
    "    if a0[i,i]==0:\n",
    "        print('a[i,i]=0, i=',i)\n",
    "x[i]=-(np.dot(a0[i,:],x)-b0[i]-a0[i,i]*x[i])/a0[i,i]\n",
    "i=i+1\n",
    "j=j+1\n",
    "err = Norm (a0, b0, x) \n",
    "\n",
    "return x,j\n",
    "\n",
    "def Relax(a,b, x,omiga):\n",
    "    p = Reform (a, b) \n",
    "    row = p.shape [0] \n",
    "    a0 = p [:, 0: row]\n",
    "    b0=p[:,row]       \n",
    "    err=100.\n",
    "    j=0\n",
    "while(err>1.e-6 and j < 2500):\n",
    "    i=0\n",
    "while (i <x.size):\n",
    "    if a0[i,i]==0:\n",
    "        print('a[i,i]=0, i=', i)\n",
    "x[i]=(1-omiga)*x[i]-omiga*(np.dot(a0[i,:],x)-b0[i]-a0[i,i]*x[i])/a0[i,i]\n",
    "i=i+1\n",
    "j=j+1\n",
    "err = Norm (a0, b0, x) \n",
    "return x, j\n",
    "\n",
    "def Norm (a, b, x):\n",
    "    axb=np.dot(a,x)-b\n",
    "    normaxb = np.linalg.norm (axb, ord = 2)\n",
    "    return normaxb\n",
    "\n",
    "\n",
    "n=8\n",
    "a=np.array([\n",
    "[[1, 0, 0, 0]\n",
    " [-0.42857143, 1, 0, 0]\n",
    " [0.33333333, 0.05907173, 1, 0]\n",
    " [0.38095238, -0.33755274, 0.19873532, 1]] \n",
    " [0, -22.57142857, -5.42857143, 5.71428571]\n",
    " [0, 0, -14.01265823, 4.32911392]\n",
    " [0, 0, 0, -26.45528455]]\n",
    " (b)=np.array([21, 1, -8, 4])\n",
    "(x)=np.zeros(n,dtype=float)\n",
    "    print('a',a)\n",
    "    print('b',b)\n",
    " \n",
    "loosefactor=1.2\n",
    "result,j=Relax(np.copy(a),np.copy(b),np.copy(x), 1.2)\n",
    "\n",
    "print('SOR method j=',j)\n",
    "print('x=',result)\n",
    "result2,j=GaussS(np.copy(a),np.copy(b),np.copy(x))\n",
    "\n",
    "print('GS method j=',j)\n",
    "print('x=',result2)\n",
    "print(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81559bcb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "518baa16",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
